/*
 * RewardSciences.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/27/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RewardSciences.PCL;
using RewardSciences.PCL.Http.Request;
using RewardSciences.PCL.Http.Response;
using RewardSciences.PCL.Http.Client;
using RewardSciences.PCL.Exceptions;

namespace RewardSciences.PCL.Controllers
{
    public partial class Rewards: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static Rewards instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static Rewards Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new Rewards();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Bid on a reward auction.
        /// </summary>
        /// <param name="userId">Required parameter: The ID of the user who is bidding on the reward auction.</param>
        /// <param name="rewardId">Required parameter: The ID of the reward auction to be bid on.</param>
        /// <param name="amount">Required parameter: Can be either 'max' (when max bidding) or the number of points the user wants to bid.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic Bid(int userId, int rewardId, string amount)
        {
            Task<dynamic> t = BidAsync(userId, rewardId, amount);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Bid on a reward auction.
        /// </summary>
        /// <param name="userId">Required parameter: The ID of the user who is bidding on the reward auction.</param>
        /// <param name="rewardId">Required parameter: The ID of the reward auction to be bid on.</param>
        /// <param name="amount">Required parameter: Can be either 'max' (when max bidding) or the number of points the user wants to bid.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> BidAsync(int userId, int rewardId, string amount)
        {
            //validating required parameters
            if (null == amount)
                throw new ArgumentNullException("amount", "The parameter \"amount\" is a required parameter and cannot be null.");

            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/rewards/{reward_id}/bids");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "reward_id", rewardId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "user_id", userId },
                { "amount", amount }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// List all the available rewards.
        /// </summary>
        /// <param name="categoryId">Optional parameter: The id of the category to filter rewards by</param>
        /// <param name="limit">Optional parameter: The number of rewards you want to be retrieved.</param>
        /// <param name="offset">Optional parameter: The number of rewards you want to skip before starting the retrieval.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic List(int? categoryId = null, int? limit = 25, int? offset = 0)
        {
            Task<dynamic> t = ListAsync(categoryId, limit, offset);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// List all the available rewards.
        /// </summary>
        /// <param name="categoryId">Optional parameter: The id of the category to filter rewards by</param>
        /// <param name="limit">Optional parameter: The number of rewards you want to be retrieved.</param>
        /// <param name="offset">Optional parameter: The number of rewards you want to skip before starting the retrieval.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListAsync(int? categoryId = null, int? limit = 25, int? offset = 0)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/rewards");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "category_id", categoryId },
                { "limit", (null != limit) ? limit : 25 },
                { "offset", (null != offset) ? offset : 0 }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Redeem a reward.
        /// </summary>
        /// <param name="userId">Required parameter: The ID of the user who is redeeming the reward.</param>
        /// <param name="rewardId">Required parameter: The ID of the reward to be redeemed.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic Redeem(int userId, int rewardId)
        {
            Task<dynamic> t = RedeemAsync(userId, rewardId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Redeem a reward.
        /// </summary>
        /// <param name="userId">Required parameter: The ID of the user who is redeeming the reward.</param>
        /// <param name="rewardId">Required parameter: The ID of the reward to be redeemed.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> RedeemAsync(int userId, int rewardId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/rewards/{reward_id}/redemptions");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "reward_id", rewardId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "user_id", userId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Show a reward's details.
        /// </summary>
        /// <param name="rewardId">Required parameter: The ID of the reward to be retrieved.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic Show(int rewardId)
        {
            Task<dynamic> t = ShowAsync(rewardId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Show a reward's details.
        /// </summary>
        /// <param name="rewardId">Required parameter: The ID of the reward to be retrieved.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ShowAsync(int rewardId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/rewards/{reward_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "reward_id", rewardId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 